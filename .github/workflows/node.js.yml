# =============================================================================
# Node.js CI/CD Pipeline
# =============================================================================
# This workflow provides comprehensive CI/CD for a Node.js calculator application
# Features:
# - Multi-version Node.js testing (18.x, 20.x, 22.x)
# - Code quality checks (linting, security audit)
# - Test execution with coverage reporting
# - Artifact archiving for test results and coverage
# - Automatic triggering on pushes, PRs, and manual dispatch
# =============================================================================

name: Node.js CI

# =============================================================================
# Trigger Configuration
# =============================================================================
# Define when this workflow should run
on:
  workflow_dispatch:    # Allow manual triggering from GitHub UI
    inputs:
      reason:
        description: 'Reason for manually triggering the pipeline'
        required: false
        default: 'Manual trigger'
  
  pull_request:         # Run on all pull requests to any branch
    branches: [ '*' ]
    types: [opened, synchronize, reopened]
  
  push:                 # Run on pushes to main branch
    branches: [ main ]
    paths-ignore:       # Skip workflow if only these files change
      - '*.md'
      - 'LICENSE'
      - '.gitignore'

# =============================================================================
# Pipeline Jobs
# =============================================================================
jobs:
  # ---------------------------------------------------------------------------
  # Main CI Job: Build, Test, and Quality Checks
  # ---------------------------------------------------------------------------
  ci:
    name: 'CI Pipeline (Node.js ${{ matrix.node-version }})'
    runs-on: ubuntu-latest
    
    # Strategy matrix to test against multiple Node.js versions
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]  # Test against LTS and current versions
      fail-fast: false  # Don't cancel other matrix jobs if one fails
    
    # Set timeout to prevent hanging jobs
    timeout-minutes: 15
    
    steps:
      # -----------------------------------------------------------------------
      # Step 1: Repository Checkout
      # -----------------------------------------------------------------------
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          # Fetch full history for better context in tools
          fetch-depth: 0
      
      # -----------------------------------------------------------------------
      # Step 2: Node.js Environment Setup
      # -----------------------------------------------------------------------
      - name: 'Setup Node.js ${{ matrix.node-version }}'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'  # Cache npm dependencies for faster builds
          cache-dependency-path: 'package-lock.json'
      
      # -----------------------------------------------------------------------
      # Step 3: Display Environment Information
      # -----------------------------------------------------------------------
      - name: 'Display environment info'
        run: |
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "Operating System: $(uname -a)"
          echo "Working directory: $(pwd)"
      
      # -----------------------------------------------------------------------
      # Step 4: Install Dependencies
      # -----------------------------------------------------------------------
      - name: 'Install dependencies'
        run: |
          # Use npm ci for faster, reliable, reproducible builds
          # It's faster than npm install and ensures exact dependency versions
          npm ci --prefer-offline --no-audit
      
      # -----------------------------------------------------------------------
      # Step 5: Security Vulnerability Check
      # -----------------------------------------------------------------------
      - name: 'Run security audit'
        run: |
          # Check for known security vulnerabilities in dependencies
          # Use moderate level to catch important issues without being too strict
          npm audit --audit-level=moderate
        continue-on-error: true  # Don't fail the build, just warn
      
      # -----------------------------------------------------------------------
      # Step 6: Code Quality - Linting
      # -----------------------------------------------------------------------
      - name: 'Run code linting'
        run: |
          # Run ESLint to check code quality and style
          # This helps maintain consistent code standards
          npm run lint
      
      # -----------------------------------------------------------------------
      # Step 7: Build Application
      # -----------------------------------------------------------------------
      - name: 'Build application'
        run: |
          # Run the build script to ensure the application builds successfully
          npm run build
      
      # -----------------------------------------------------------------------
      # Step 8: Prepare Test Environment
      # -----------------------------------------------------------------------
      - name: 'Prepare test environment'
        run: |
          # Create output directory for test results
          # Ensure the directory exists before running tests
          mkdir -p ./out
          mkdir -p ./coverage
      
      # -----------------------------------------------------------------------
      # Step 9: Execute Tests with Coverage
      # -----------------------------------------------------------------------
      - name: 'Run test suite'
        run: |
          # Execute the full test suite with coverage reporting
          # The test script includes nyc for coverage and mocha for testing
          npm test
        env:
          # Set Node environment for testing
          NODE_ENV: test
      
      # -----------------------------------------------------------------------
      # Step 10: Process Artifact Names
      # -----------------------------------------------------------------------
      - name: 'Prepare artifact names'
        id: artifacts
        run: |
          # Sanitize branch/ref names for use in artifact names
          # Replace special characters that aren't allowed in artifact names
          safe_ref="${GITHUB_REF_NAME//\//-}"
          safe_ref="${safe_ref//[^a-zA-Z0-9._-]/}"
          
          echo "ref_name=${safe_ref}" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          
          # Display the sanitized names for debugging
          echo "Original ref: ${GITHUB_REF_NAME}"
          echo "Sanitized ref: ${safe_ref}"
      
      # -----------------------------------------------------------------------
      # Step 11: Archive Test Results
      # -----------------------------------------------------------------------
      - name: 'Archive test results'
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests failed
        with:
          name: 'test-results-${{ steps.artifacts.outputs.ref_name }}-${{ matrix.node-version }}-${{ steps.artifacts.outputs.timestamp }}'
          path: |
            ./out/test-results.xml
            ./out/**/*
          retention-days: 30  # Keep artifacts for 30 days
          if-no-files-found: warn  # Warn if no files found, don't fail
      
      # -----------------------------------------------------------------------
      # Step 12: Archive Coverage Reports
      # -----------------------------------------------------------------------
      - name: 'Archive coverage reports'
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests failed
        with:
          name: 'coverage-report-${{ steps.artifacts.outputs.ref_name }}-${{ matrix.node-version }}-${{ steps.artifacts.outputs.timestamp }}'
          path: |
            ./coverage/**/*
            ./nyc_output/**/*
          retention-days: 30
          if-no-files-found: warn
      
      # -----------------------------------------------------------------------
      # Step 13: Display Test Summary
      # -----------------------------------------------------------------------
      - name: 'Display build summary'
        if: always()
        run: |
          echo "==================================="
          echo "Build Summary for Node.js ${{ matrix.node-version }}"
          echo "==================================="
          echo "Branch/Ref: ${GITHUB_REF_NAME}"
          echo "Commit SHA: ${GITHUB_SHA}"
          echo "Event: ${GITHUB_EVENT_NAME}"
          
          # Show test results if they exist
          if [ -f "./out/test-results.xml" ]; then
            echo "‚úÖ Test results generated"
          else
            echo "‚ö†Ô∏è  No test results file found"
          fi
          
          # Show coverage if it exists
          if [ -d "./coverage" ]; then
            echo "‚úÖ Coverage report generated"
            # Display coverage summary if available
            if [ -f "./coverage/lcov-report/index.html" ]; then
              echo "üìä Coverage report available in artifacts"
            fi
          else
            echo "‚ö†Ô∏è  No coverage directory found"
          fi
